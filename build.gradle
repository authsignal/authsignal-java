plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'

    testImplementation 'junit:junit:4.13.2'
}

def Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

nexusPublishing {
  repositories {
    sonatype {
        username.set(properties.getProperty("ossrhUsername"))
        password.set(properties.getProperty("ossrhPassword"))
        stagingProfileId.set(properties.getProperty("sonatypeStagingProfileId"))
        nexusUrl.set(uri(properties.getProperty("nexusUrl")))
        snapshotRepositoryUrl.set(uri(properties.getProperty("snapshotRepositoryUrl")))
    }
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = project.pomArtifactId
      groupId = project.pomGroup
      version = project.versionName
      from components.java
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
          name = 'authsignal-java'
          description = 'The Authsignal Server SDK for Java.'
          url = 'https://github.com/authsignal/authsignal-java'
          licenses {
            license {
              name = 'MIT'
              url = 'https://github.com/authsignal/authsignal-java/blob/main/LICENSE.md'
            }
          }
          developers {
            developer {
              id = 'Authsignal'
              name = 'Authsignal'
            }
          }
          scm {
              connection = 'scm:git:github.com/authsignal/authsignal-java.git'
              developerConnection = 'scm:git:ssh://github.com/authsignal/authsignal-java.git'
              url = 'https://github.com/authsignal/authsignal-java/tree/main'
          }
      }
    }
  }
}

signing {
    useInMemoryPgpKeys(
        properties.getProperty("signing.keyId"),
        properties.getProperty("signing.key"),
        properties.getProperty("signing.password"),
    )

    sign publishing.publications.mavenJava
}

test {
    testLogging.showStandardStreams = true
}